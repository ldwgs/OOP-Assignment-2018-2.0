package jForms;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/

/**
 *
 * @author lutfijamaluddin
 */
public final class AddProperty extends javax.swing.JFrame {
    InputStream fisImage, fisMap;
    
    
    /**
     * Creates new form AddNewManager
     * @throws java.sql.SQLException
     */
    public AddProperty() throws SQLException {
        initComponents();
        propertyTypeComboBox();
        propertyManagerComboBox();
        propertyStateComboBox();
    }
    
    public void propertyTypeComboBox() throws SQLException {
        Statement s = DriverManager.getConnection("jdbc:derby://localhost:1527/OOP", "ludwig", "password").createStatement();
        String sql = "SELECT DISTINCT Type FROM TYPE"; // No duplicates
        ResultSet rs = s.executeQuery(sql);
        
        while(rs.next()) {
            propertyType.addItem(rs.getString("TYPE"));
        }
    }
    
    public void propertyManagerComboBox() throws SQLException {
        Statement s = DriverManager.getConnection("jdbc:derby://localhost:1527/OOP", "ludwig", "password").createStatement();
        String sql = "SELECT * FROM Manager";
        ResultSet rs = s.executeQuery(sql);
        
        while(rs.next()) {
            propertyManager.addItem("ID : " + rs.getString("ID") + " , " + rs.getString("NAME"));
        }
    }
    
    public void propertyStateComboBox() throws SQLException {
        Statement s = DriverManager.getConnection("jdbc:derby://localhost:1527/OOP", "ludwig", "password").createStatement();
        String sql = "SELECT * FROM State";
        ResultSet rs = s.executeQuery(sql);
        
        while(rs.next()) {
            propertyState.addItem(rs.getString("STATE"));
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        propertyID = new javax.swing.JTextField();
        propertyName = new javax.swing.JTextField();
        propertyPrice = new javax.swing.JTextField();
        addPropertyButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        propertyAddress = new javax.swing.JTextField();
        propertyType = new javax.swing.JComboBox<>();
        propertyVacant = new javax.swing.JCheckBox();
        propertyRent = new javax.swing.JCheckBox();
        propertySale = new javax.swing.JCheckBox();
        propertyRentPrice = new javax.swing.JTextField();
        propertySquare = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        propertyManager = new javax.swing.JComboBox<>();
        uploadImageButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        propertyImage = new javax.swing.JLabel();
        uploadLocationButton = new javax.swing.JButton();
        propertyMap = new javax.swing.JLabel();
        propertyState = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuBar = new javax.swing.JMenu();
        mainMenu = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Property");

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setText("Add Property");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel2.setText("ID :");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel3.setText("Name :");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel4.setText("Address :");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel5.setText("Type :");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel6.setText("Vacant ");

        propertyID.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N

        propertyName.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N

        propertyPrice.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N

        addPropertyButton.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        addPropertyButton.setText("Add Property");
        addPropertyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPropertyButtonActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel7.setText("For Rent");

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel8.setText("For Sale");

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel9.setText("State :");

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel10.setText("Price :");

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel11.setText("Square Footage :");

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel12.setText("Property Manager :");

        propertyAddress.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N

        propertyType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                propertyTypeFocusGained(evt);
            }
        });

        propertyRentPrice.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N

        propertySquare.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel13.setText("Monthly Rental :");

        uploadImageButton.setText("Upload Image");
        uploadImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadImageButtonActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel15.setText("Image :");

        jLabel16.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel16.setText("Map :");

        propertyImage.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        uploadLocationButton.setText("Upload Location");
        uploadLocationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadLocationButtonActionPerformed(evt);
            }
        });

        propertyMap.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        propertyState.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                propertyStateFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel12)
                                    .addGap(18, 18, 18)
                                    .addComponent(propertyManager, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel11)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(propertySquare, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(propertyState, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(propertyPrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(uploadLocationButton)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addGap(18, 18, 18)
                                        .addComponent(propertyMap, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addGap(18, 18, 18)
                                        .addComponent(propertyImage, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(uploadImageButton)))))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(18, 18, 18)
                            .addComponent(propertyType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addGap(18, 18, 18)
                            .addComponent(propertyAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(18, 18, 18)
                            .addComponent(propertyName))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(propertyID))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(propertyVacant)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(propertyRent))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(79, 79, 79)
                                        .addComponent(propertySale))))
                            .addGap(75, 75, 75)
                            .addComponent(jLabel13)
                            .addGap(18, 18, 18)
                            .addComponent(propertyRentPrice))
                        .addComponent(jLabel6)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(addPropertyButton)
                            .addGap(236, 236, 236)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(365, 365, 365)
                        .addComponent(jLabel1)))
                .addGap(323, 547, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(propertyID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(propertyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(propertyAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(propertyType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(propertyVacant))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(propertyRent)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel13)
                                .addComponent(propertyRentPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(propertySale)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(propertyState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(propertyPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(propertyManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(propertySquare, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(propertyMap, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addGap(18, 18, 18)
                        .addComponent(uploadLocationButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(propertyImage, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(uploadImageButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(addPropertyButton)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);

        menuBar.setText("File");

        mainMenu.setText("Main Menu");
        mainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuActionPerformed(evt);
            }
        });
        menuBar.add(mainMenu);

        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        menuBar.add(exitMenu);

        jMenuBar1.add(menuBar);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 864, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void addPropertyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPropertyButtonActionPerformed
        // Check for if any of the fields are empty. All fields need to be filled.
        if (propertyID.getText().isEmpty() || propertyName.getText().isEmpty() || propertyRentPrice.getText().isEmpty()
                || propertyAddress.getText().isEmpty() || /*"NULL".equals(propertyType.getSelectedItem().toString()) ||*/ propertyPrice.getText().isEmpty()
                || propertySquare.getText().isEmpty() /*|| "NULL".equals(propertyManager.getSelectedItem().toString())*/) {
            JOptionPane.showMessageDialog(null, "Please enter all details");
            
            if (propertyRent.isSelected() && propertyRentPrice.getText().isEmpty()) { // Checks for when if the 'For Rent' checkbox is selected but 'Monthly Rental' has not been declared
                JOptionPane.showMessageDialog(null, "Please input a Monthly Rent");
            }
            
            if (!propertyRent.isSelected() && !propertyRentPrice.getText().isEmpty()) { // Checks for when if the 'For Rent' checkbox is not selected but the user has keyed in a 'Monthly Rental'
                JOptionPane.showMessageDialog(null, "Please enable the 'For Rent' checkbox");
            }
            
            if (propertyImage.getIcon() == null) { // Checks for when if the 'Property Image' icon is empty
                JOptionPane.showMessageDialog(null, "Please upload a property picture");
            }
            
            if (propertyMap.getIcon() == null) { // Checks for when if the 'Property Location' icon is empty
                JOptionPane.showMessageDialog(null, "Please upload a property location");
            }
            
        }
        
        else {
            // Below is code to get the text in the respective text boxes.
            String ID = propertyID.getText().trim();
            String name = propertyName.getText().trim();
            String monthlyRent = propertyRentPrice.getText().trim();
            String address = propertyAddress.getText().trim();
            String type = propertyType.getSelectedItem().toString();
            boolean vacant = propertyVacant.isSelected();
            boolean toRent = propertyRent.isSelected();
            boolean toSell = propertySale.isSelected();
            String state = propertyState.getSelectedItem().toString();
            String price = propertyPrice.getText().trim();
            String squareFootage = propertySquare.getText().trim();
            String manager = propertyManager.getSelectedItem().toString();
            
            
            // Below is code to insert the values above into the table
            try {
                Connection s = DriverManager.getConnection("jdbc:derby://localhost:1527/OOP", "ludwig", "password");
                PreparedStatement ps = s.prepareStatement("Insert INTO Property("
                        + "ID, "
                        + "NAME, "
                        + "MONTHLYRENT, "
                        + "ADDRESS, "
                        + "TYPE, "
                        + "STATE, "
                        + "PRICE, "
                        + "SQUAREFOOTAGE, "
                        + "MANAGER, "
                        + "VACANT, "
                        + "TORENT, "
                        + "TOSELL, "
                        + "IMAGE, "
                        + "MAP) "
                        + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                
                ps.setString(1, ID);
                ps.setString(2, name);
                ps.setString(3, monthlyRent);
                ps.setString(4, address);
                ps.setString(5, type);
                ps.setString(6, state);
                ps.setString(7, price);
                ps.setString(8, squareFootage);
                ps.setString(9, manager);
                ps.setBoolean(10, vacant);
                ps.setBoolean(11, toRent);
                ps.setBoolean(12, toSell);
                ps.setBlob(13, fisImage);
                ps.setBlob(14, fisMap);
                
//                String sql = "INSERT INTO Property " + "VALUES (" +
//                                                        ID + "," +
//                                                        "'" + name + "'" + "," +
//                                                        "'" + monthlyRent + "'" + "," +
//                                                        "'" + address + "'" + "," +
//                                                        "'" + type + "'" + "," +
//                                                        "'" + state + "'" + "," +
//                                                        "'" + price + "'" + "," +
//                                                        "'" + squareFootage + "'" + "," +
//                                                        "'" + manager + "'" + "," +
//                                                        "'" + vacant + "'" + "," +
//                                                        "'" + toRent + "'" + "," +
//                                                        "'" + toSell + "'" +
//                                                        fisImage + "as Image" +
//                                                        fisMap + "as Image" + ")";

ps.executeUpdate(); // This line of code executes the SQL query and adds in the values to the table
JOptionPane.showMessageDialog(null, "Successfully added new property: " + name);
            } catch (SQLException ex) {
                Logger.getLogger(AddManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_addPropertyButtonActionPerformed
    
    private void mainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuActionPerformed
        new MainMenu().setVisible(true);
        dispose();
    }//GEN-LAST:event_mainMenuActionPerformed
    
    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuActionPerformed
    
    private void propertyTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_propertyTypeFocusGained
        
    }//GEN-LAST:event_propertyTypeFocusGained
    
    private void uploadImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadImageButtonActionPerformed
        // This button allows the user to upload an image to the database, it will then show the image on screen
        JFileChooser file = new JFileChooser();
        file.showOpenDialog(null);
        File f = file.getSelectedFile();
        try {
            fisImage = new FileInputStream(file.getSelectedFile());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AddProperty.class.getName()).log(Level.SEVERE, null, ex);
        }
        propertyImage.setIcon(new ImageIcon(f.toString()));
        
    }//GEN-LAST:event_uploadImageButtonActionPerformed
    
    private void uploadLocationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadLocationButtonActionPerformed
        // This button allows the user to upload an image to the database, it will then show the image on screen
        JFileChooser file = new JFileChooser();
        file.showOpenDialog(null);
        File f = file.getSelectedFile();
        try {
            fisMap = new FileInputStream(file.getSelectedFile());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AddProperty.class.getName()).log(Level.SEVERE, null, ex);
        }
        propertyMap.setIcon(new ImageIcon(f.toString()));
    }//GEN-LAST:event_uploadLocationButtonActionPerformed

    private void propertyStateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_propertyStateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_propertyStateFocusGained
    
    public String readFile(File file) throws IOException {
        return new String(Files.readAllBytes(file.toPath()));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddManager().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPropertyButton;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mainMenu;
    private javax.swing.JMenu menuBar;
    private javax.swing.JTextField propertyAddress;
    private javax.swing.JTextField propertyID;
    private javax.swing.JLabel propertyImage;
    private javax.swing.JComboBox<String> propertyManager;
    private javax.swing.JLabel propertyMap;
    private javax.swing.JTextField propertyName;
    private javax.swing.JTextField propertyPrice;
    private javax.swing.JCheckBox propertyRent;
    private javax.swing.JTextField propertyRentPrice;
    private javax.swing.JCheckBox propertySale;
    private javax.swing.JTextField propertySquare;
    private javax.swing.JComboBox<String> propertyState;
    private javax.swing.JComboBox<String> propertyType;
    private javax.swing.JCheckBox propertyVacant;
    private javax.swing.JButton uploadImageButton;
    private javax.swing.JButton uploadLocationButton;
    // End of variables declaration//GEN-END:variables
}
