package jForms;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 *
 * @author lutfijamaluddin
 */
public final class PropertyMenu extends javax.swing.JFrame {
    
    public static int counter = 1; // Allows other classes to use this variable. Mainly used to display the correct Manager contact number
    
    /**
     * Creates new form PropertyMenu
     * @throws java.io.IOException
     */
    public PropertyMenu() throws IOException {
        initComponents();
        initProperty(); 
    }
    
    public void initProperty() throws IOException {
        
        if (counter == 1) {// Disables button so that the table doesn't go out of bounds upon click
            previousButton.setEnabled(false); // Disables button
        }
        else if (counter > 1) { // Enables button once the counter is back into valid indexes
            previousButton.setEnabled(true); // Enables button
        }
        if (counter == getTableSize()) {
            nextButton.setEnabled(false);
        } 
        if (counter < getTableSize()) {
            nextButton.setEnabled(true);
        }
        
        try {
            Statement s = DriverManager.getConnection("jdbc:derby://localhost:1527/OOP", "ludwig", "password").createStatement();
            String sql = "SELECT * FROM Property WHERE ID = " + counter;
            ResultSet rs = s.executeQuery(sql);
                
            while(rs.next()) {
                propertyName.setText(rs.getString("NAME"));
                propertyType.setText(rs.getString("TYPE"));
                    
                forRent.setSelected(rs.getBoolean("TORENT"));
                forSale.setSelected(rs.getBoolean("TOSELL"));
                    
                propertyState.setText(rs.getString("STATE"));
                propertyArea.setText(rs.getString("ADDRESS"));
                propertyPrice.setText(rs.getString("PRICE"));
                propertySize.setText(rs.getString("SQUAREFOOTAGE"));
                
                InputStream propertyImageIS = rs.getBinaryStream("IMAGE"); 
                // Decode the inputstream as BufferedImage
                BufferedImage propertyImageBuff;
                propertyImageBuff = ImageIO.read(propertyImageIS);
                Image propertyImageI = propertyImageBuff;
                ImageIcon propertyImageIcon =new ImageIcon(propertyImageI);
                propertyImage.setIcon(propertyImageIcon); 
                
                InputStream propertyMapIS = rs.getBinaryStream("MAP"); 
                // Decode the inputstream as BufferedImage
                BufferedImage propertyMapBuff;
                propertyMapBuff = ImageIO.read(propertyMapIS);
                Image propertyMapI = propertyMapBuff;
                ImageIcon propertyMapIcon =new ImageIcon(propertyMapI);
                propertyMap.setIcon(propertyMapIcon); 
                }
            
        } catch (SQLException ex) {
            Logger.getLogger(PropertyMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public int getTableSize() {
        int size = 0;
        try {
            Statement s = DriverManager.getConnection("jdbc:derby://localhost:1527/OOP", "ludwig", "password").createStatement();
            String sql = "SELECT count(*) FROM Property";
            ResultSet rs = s.executeQuery(sql);
            while(rs.next()) {
                size = rs.getInt(1);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(PropertyMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return size;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        propertyName = new javax.swing.JLabel();
        propertyType = new javax.swing.JLabel();
        forRent = new javax.swing.JCheckBox();
        forSale = new javax.swing.JCheckBox();
        propertyState = new javax.swing.JLabel();
        propertyArea = new javax.swing.JLabel();
        propertyPrice = new javax.swing.JLabel();
        propertySize = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        previousButton = new javax.swing.JButton();
        propertyType1 = new javax.swing.JLabel();
        propertyType2 = new javax.swing.JLabel();
        propertyImage = new javax.swing.JLabel();
        propertyMap = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        propertyName.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        propertyName.setText("<NAME>");
        propertyName.setToolTipText("");

        propertyType.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        propertyType.setText("<TYPE>");
        propertyType.setToolTipText("");

        forRent.setEnabled(false);
        forRent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forRentActionPerformed(evt);
            }
        });

        forSale.setEnabled(false);
        forSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forSaleActionPerformed(evt);
            }
        });

        propertyState.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        propertyState.setText("<STATE>");
        propertyState.setToolTipText("");

        propertyArea.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        propertyArea.setText("<AREA>");
        propertyArea.setToolTipText("");

        propertyPrice.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        propertyPrice.setText("<PRICE>");
        propertyPrice.setToolTipText("");

        propertySize.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        propertySize.setText("<SIZE RANGE SQFT>");
        propertySize.setToolTipText("");

        jButton1.setText("Contact");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        propertyType1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        propertyType1.setText("For Rent");
        propertyType1.setToolTipText("");

        propertyType2.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        propertyType2.setText("For Sale");
        propertyType2.setToolTipText("");

        jMenu3.setText("File");

        jMenuItem1.setText("Main Menu");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(previousButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(propertyName, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(propertySize, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(propertyPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(propertyState, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(propertyArea, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(propertyType, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(propertyType1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(propertyType2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(forSale)
                                            .addComponent(forRent))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 164, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(propertyImage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(propertyMap, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(100, 100, 100)))
                        .addComponent(jButton1)))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(propertyName, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(propertyType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(propertyType2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(forRent)
                        .addGap(18, 18, 18)))
                .addComponent(propertyType1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addComponent(forSale)
                .addGap(46, 46, 46)
                .addComponent(propertyState, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(propertyArea, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(propertyPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(propertySize, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 225, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextButton)
                    .addComponent(previousButton))
                .addGap(51, 51, 51))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(propertyImage, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100)
                .addComponent(propertyMap, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        new MainMenu().setVisible(true);
        dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void forRentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forRentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_forRentActionPerformed

    private void forSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forSaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_forSaleActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        counter--;
        try {   
            initProperty();
        } catch (IOException ex) {
            Logger.getLogger(PropertyMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_previousButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        counter++;
        try {
            initProperty();
        } catch (IOException ex) {
            Logger.getLogger(PropertyMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new ContactManager().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PropertyMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PropertyMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PropertyMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PropertyMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new PropertyMenu().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(PropertyMenu.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox forRent;
    private javax.swing.JCheckBox forSale;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JLabel propertyArea;
    private javax.swing.JLabel propertyImage;
    private javax.swing.JLabel propertyMap;
    private javax.swing.JLabel propertyName;
    private javax.swing.JLabel propertyPrice;
    private javax.swing.JLabel propertySize;
    private javax.swing.JLabel propertyState;
    private javax.swing.JLabel propertyType;
    private javax.swing.JLabel propertyType1;
    private javax.swing.JLabel propertyType2;
    // End of variables declaration//GEN-END:variables
}
